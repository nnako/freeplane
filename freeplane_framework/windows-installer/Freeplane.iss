; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
;****************************************************************************
;* Install Script for FreeMind
;****************************************************************************
;* Before using this be sure to download and install Inno Setup from
;* www.jrsoftware.org and ISTool from www.istool.org. These are required to
;* make changes and compile this script. To use the billboard feature please
;* dowload and install the ISX BillBoard DLL.
;****************************************************************************
; Predrag Cuklin 18/06/2009 - Universial Version
;****************************************************************************

#define MyVersion "1.12.10"
#define MyStatus ""
#define MyAppName "Freeplane"
#define MyAppPublisher "Open source"
#define MyAppURL "http://sourceforge.net/projects/freeplane/"
#define MyAppExeName "freeplane.exe"
#define ConfigurationDirectory 'Freeplane\1.12.x'

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D3941722-C4DD-4509-88C4-0E87F675A859}
AppCopyright=Copyright � 2000-2025 Freeplane team and others
AppName={#MyAppName}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetDefaultInstallDir}
DefaultGroupName={#MyAppName}
ArchitecturesInstallIn64BitMode=x64 ia64
OutputDir=.
OutputBaseFilename=Freeplane-Setup
SetupIconFile=Setup.ico
VersionInfoDescription=Free mind mapping software. Fast. Simple. Streamlined.
ChangesAssociations=true
PrivilegesRequired=lowest
AllowNoIcons=true
ShowTasksTreeLines=true
WindowVisible=true
WizardSmallImageFile=Freeplane_bee.bmp
WizardImageStretch=false
#if MyStatus == ""
  AppVersion={#MyVersion}
#else
  AppVersion={#MyVersion}{#MyStatus}
#endif
UninstallDisplayIcon={app}\freeplane.exe
UninstallDisplayName=Freeplane
DiskSpanning=false
MergeDuplicateFiles=true
Compression=lzma
SolidCompression=true
LanguageDetectionMethod=locale
WizardImageFile=WizModernImage-IS.bmp

[Languages]
Name: English; MessagesFile: compiler:Default.isl,messages_en.isl; LicenseFile: gpl-2.0_english.txt
Name: Croatian; MessagesFile: Croatian.isl,messages_hr.isl; LicenseFile: gpl-2.0_croatian.txt
Name: French; MessagesFile: compiler:Languages\French.isl,messages_fr.isl; LicenseFile: gpl-2.0_french.txt
Name: German; MessagesFile: compiler:Languages\German.isl,messages_de.isl; LicenseFile: gpl-2.0_german.txt
Name: Russian; MessagesFile: compiler:Languages\Russian.isl,messages_ru.isl; LicenseFile: gpl-2.0_russian.txt
Name: Spanish; MessagesFile: compiler:Languages\Spanish.isl,messages_es.isl; LicenseFile: gpl-2.0_english.txt
Name: Portuguese; MessagesFile: compiler:Languages\Portuguese.isl,messages_pt.isl; LicenseFile: gpl-2.0_portuguese.txt

[CustomMessages]
; English
English.NonAdminInstallDescription=Install without administrator rights (single-user installation)
English.NonAdminInstallGroupDescription=Installation mode:

; German
German.NonAdminInstallDescription=Installation ohne Administratorrechte (Einzelbenutzerinstallation)
German.NonAdminInstallGroupDescription=Installationsmodus:

; French
French.NonAdminInstallDescription=Installer sans droits d'administrateur (installation mono-utilisateur)
French.NonAdminInstallGroupDescription=Mode d'installation :

; Croatian
Croatian.NonAdminInstallDescription=Instalacija bez administratorskih prava (instalacija za jednog korisnika)
Croatian.NonAdminInstallGroupDescription=Način instalacije:

; Russian
Russian.NonAdminInstallDescription=Установка без прав администратора (однопользовательская установка)
Russian.NonAdminInstallGroupDescription=Режим установки:

; Spanish
Spanish.NonAdminInstallDescription=Instalar sin derechos de administrador (instalación para un solo usuario)
Spanish.NonAdminInstallGroupDescription=Modo de instalación:

; Portuguese
Portuguese.NonAdminInstallDescription=Instalar sem direitos de administrador (instalação para um único usuário)
Portuguese.NonAdminInstallGroupDescription=Modo de instalação:

[Tasks]
Name: desktopicon; Description: {cm:CreateDesktopIcon}; GroupDescription: {cm:AdditionalIcons}
Name: quicklaunchicon; Description: {cm:CreateQuickLaunchIcon}; GroupDescription: {cm:AdditionalIcons}
Name: associate; Description: {cm:AssocFileExtension,Freeplane,.mm}; GroupDescription: {cm:AssocingFileExtension,Freeplane,.mm}
Name: nonadmininstall; Description: {cm:NonAdminInstallDescription}; GroupDescription: {cm:NonAdminInstallGroupDescription}; Check: ShouldShowInstallModeTask

[Files]
Source: "{#AppImage}\freeplane\*"; DestDir: "{app}"; Flags: ignoreversion createallsubdirs recursesubdirs; Excludes: "\app\*.cfg"
Source: "{#AppImage}\freeplane\app\*.cfg"; DestDir: "{app}\app"; Flags: ignoreversion onlyifdoesntexist

[Icons]
Name: {group}\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks:
Name: {group}\Uninstall Freeplane; Filename: {uninstallexe}; Tasks:
Name: {commondesktop}\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: desktopicon
Name: {userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}; Filename: {app}\{#MyAppExeName}; Tasks: quicklaunchicon

[Run]
Filename: {app}\{#MyAppExeName}; Description: {cm:LaunchProgram,{#MyAppName}}; Flags: nowait postinstall skipifsilent

[Registry]
; Non-admin installation registry entries (HKCU)
Root: "HKCU"; Subkey: "Software\Classes\.mm"; ValueType: string; ValueData: "FreeplaneApplication"; Flags: uninsdeletekey; Tasks: associate nonadmininstall
Root: "HKCU"; Subkey: "Software\Classes\freeplane"; ValueType: string; ValueData: "URL:Freeplane protocol"; Flags: uninsdeletekey; Tasks: associate nonadmininstall
Root: "HKCU"; Subkey: "Software\Classes\freeplane"; ValueType: string; ValueName: "URL Protocol"; Flags: uninsdeletekey; Tasks: associate nonadmininstall
Root: "HKCU"; Subkey: "Software\Classes\freeplane\Shell\Open\Command"; ValueType: string; ValueData: """{app}\freeplane.exe"" ""%1"""; Flags: uninsdeletevalue; Tasks: associate nonadmininstall
Root: "HKCU"; Subkey: "Software\Classes\freeplane\DefaultIcon"; ValueType: string; ValueData: "{app}\freeplaneIcons.dll,0"; Flags: uninsdeletevalue; Tasks: associate nonadmininstall
Root: "HKCU"; Subkey: "Software\Classes\FreeplaneApplication"; ValueType: string; ValueData: "Freeplane mind map"; Flags: uninsdeletekey; Tasks: associate nonadmininstall
Root: "HKCU"; Subkey: "Software\Classes\FreeplaneApplication\Shell\Open\Command"; ValueType: string; ValueData: """{app}\freeplane.exe"" ""%1"""; Flags: uninsdeletevalue; Tasks: associate nonadmininstall
Root: "HKCU"; Subkey: "Software\Classes\FreeplaneApplication\DefaultIcon"; ValueType: string; ValueData: "{app}\freeplaneIcons.dll,0"; Flags: uninsdeletevalue; Tasks: associate nonadmininstall

; Admin installation registry entries (HKLM/HKCR)
Root: "HKLM"; Subkey: "Software\JavaSoft\Prefs"; Tasks: not nonadmininstall
Root: "HKCR"; Subkey: "Applications\freeplane.exe"; Flags: deletekey; Tasks: associate not nonadmininstall
Root: "HKCR"; Subkey: ".mm"; Flags: deletekey; Tasks: associate not nonadmininstall
Root: "HKLM"; Subkey: "SOFTWARE\Classes\.mm"; Flags: deletekey; Tasks: associate not nonadmininstall
Root: "HKCU"; Subkey: "Software\Classes\Applications\freeplane.exe"; Flags: deletekey; Tasks: associate not nonadmininstall
Root: "HKCU"; Subkey: "Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.mm"; Flags: deletekey; Tasks: associate not nonadmininstall
Root: "HKCR"; Subkey: ".mm"; ValueType: string; ValueData: "FreeplaneApplication"; Flags: uninsdeletekey; Tasks: associate not nonadmininstall
Root: "HKCR"; Subkey: "freeplane"; ValueType: string; ValueData: "URL:Freeplane protocol"; Flags: uninsdeletekey; Tasks: associate not nonadmininstall
Root: "HKCR"; Subkey: "freeplane"; ValueType: string; ValueName: "URL Protocol"; Flags: uninsdeletekey; Tasks: associate not nonadmininstall
Root: "HKCR"; Subkey: "freeplane\Shell\Open\Command"; ValueType: string; ValueData: """{app}\freeplane.exe"" ""%1"""; Flags: uninsdeletevalue; Tasks: associate not nonadmininstall
Root: "HKCR"; Subkey: "freeplane\DefaultIcon"; ValueType: string; ValueData: "{app}\freeplaneIcons.dll,0"; Flags: uninsdeletevalue; Tasks: associate not nonadmininstall
Root: "HKCR"; Subkey: "FreeplaneApplication"; ValueType: string; ValueData: "Freeplane mind map"; Flags: uninsdeletekey; Tasks: associate not nonadmininstall
Root: "HKCR"; Subkey: "FreeplaneApplication\Shell\Open\Command"; ValueType: string; ValueData: """{app}\freeplane.exe"" ""%1"""; Flags: uninsdeletevalue; Tasks: associate not nonadmininstall
Root: "HKCR"; Subkey: "FreeplaneApplication\DefaultIcon"; ValueType: string; ValueData: "{app}\freeplaneIcons.dll,0"; Flags: uninsdeletevalue; Tasks: associate not nonadmininstall

; Store installation mode flag
Root: HKCU; Subkey: "Software\Freeplane"; ValueType: string; ValueName: "InstallMode"; ValueData: "user"; Flags: uninsdeletevalue; Tasks: nonadmininstall
Root: HKLM; Subkey: "Software\Freeplane"; ValueType: string; ValueName: "InstallMode"; ValueData: "admin"; Flags: uninsdeletevalue; Tasks: not nonadmininstall

[InstallDelete]
Type: filesandordirs; Name: "{app}\core"
Type: filesandordirs; Name: "{app}\plugins"
Type: filesandordirs; Name: "{app}\runtime"

[UninstallDelete]
Type: filesandordirs; Name: "{app}"

[Dirs]
Name: {userappdata}\Freeplane; Flags: uninsneveruninstall; Tasks: ; Languages:

[Code]
function CmdLineParamExists(const Value: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  for I := 1 to ParamCount do
    if CompareText(ParamStr(I), Value) = 0 then
    begin
      Result := True;
      Exit;
    end;
end;

function DeleteConfigurationFilesForced: Boolean;
begin
  Result := CmdLineParamExists('/DELETE_CONFIGURATION_FILES');
end;

function KeepConfigurationFilesForced: Boolean;
begin
  Result := CmdLineParamExists('/KEEP_CONFIGURATION_FILES');
end;

// ask for delete config file during uninstall
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  UserConfigurationDirectory: String;
begin
  case CurUninstallStep of
    usUninstall:
      begin
        UserConfigurationDirectory := ExpandConstant('{userappdata}\{#ConfigurationDirectory}');
        if KeepConfigurationFilesForced or (not DirExists(UserConfigurationDirectory)) or (UninstallSilent and (DeleteConfigurationFilesForced = False)) then begin
          exit;
        end
        else if  (DeleteConfigurationFilesForced = True) OR (MsgBox(ExpandConstant('{cm:DeleteConfigurationFiles,{username}}'), mbConfirmation, MB_YESNO or MB_DEFBUTTON2) = IDYES) then
          begin
             DelTree(UserConfigurationDirectory, True, True, True);
          end
      end;
  end;
end;

function IsExistingInstallation: Boolean;
var
  InstallMode: string;
begin
  Result := False;
  // Check HKCU first (non-admin installation)
  if RegQueryStringValue(HKEY_CURRENT_USER, 'Software\Freeplane', 'InstallMode', InstallMode) then
    Result := True
  // Then check HKLM (admin installation)
  else if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'Software\Freeplane', 'InstallMode', InstallMode) then
    Result := True;
end;

function IsNonAdminInstallation: Boolean;
var
  InstallMode: string;
begin
  Result := False;
  if RegQueryStringValue(HKEY_CURRENT_USER, 'Software\Freeplane', 'InstallMode', InstallMode) then
    Result := CompareText(InstallMode, 'user') = 0;
end;

function IsAdmin: Boolean;
begin
  Result := IsAdminLoggedOn or IsPowerUserLoggedOn;
end;

function ShouldShowInstallModeTask: Boolean;
begin
  // Only show the task if:
  // 1. It's a new installation (not an upgrade)
  // 2. The user is an admin (otherwise force non-admin install)
  Result := (not IsExistingInstallation) and IsAdmin;
end;

function GetDefaultInstallDir(Param: string): string;
begin
  if IsExistingInstallation then begin
    // For existing installation, use the same mode as before
    if IsNonAdminInstallation then begin
      Result := ExpandConstant('{localappdata}\Programs\{#MyAppName}');
      WizardSelectTasks('nonadmininstall');
    end else
      Result := ExpandConstant('{pf}\{#MyAppName}');
  end else if (not IsAdmin) or WizardIsTaskSelected('nonadmininstall') then begin
    // Force non-admin install if user doesn't have admin rights
    Result := ExpandConstant('{localappdata}\Programs\{#MyAppName}');
    if not IsAdmin then
      WizardSelectTasks('nonadmininstall');
  end else
    Result := ExpandConstant('{pf}\{#MyAppName}');
end;
